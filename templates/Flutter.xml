<templateSet group="Flutter">
  <template name="stless" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$ extends StatelessWidget {&#10;  const $NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Container(&#10;        $END$&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="stful" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$ extends StatefulWidget {&#10;  const $NAME$({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  $SNAME$ createState() =&gt; $SNAME$();&#10;}&#10;&#10;class $SNAME$ extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Container(&#10;        $END$&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SNAME" expression="regularExpression(concat(&quot;_&quot;, NAME, &quot;State&quot;), &quot;^__&quot;, &quot;_&quot;)" defaultValue="" alwaysStopAt="false" />
    <context />
  </template>
  <template name="paddingall" value="const EdgeInsets.all($VAL$)" description="Padding All" toReformat="false" toShortenFQNames="true">
    <variable name="VAL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="paddingonly" value="const EdgeInsets.only(left: $VAL1$,top: $VAL2$,right: $VAL3$,bottom: $VAL4$,)" description="Padding Only" toReformat="false" toShortenFQNames="true">
    <variable name="VAL1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAL2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAL3" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAL4" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="paddingv" value="const EdgeInsets.symmetric(vertical: $VAL$) " description="Padding Vertical" toReformat="false" toShortenFQNames="true">
    <variable name="VAL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="paddingh" value="const EdgeInsets.symmetric(horizontal: $VAL$), " description="Padding Horizontal" toReformat="false" toShortenFQNames="true">
    <variable name="VAL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="paddinghv" value="const EdgeInsets.symmetric(horizontal: $VAL2$, vertical: $VAL1$)  " description="Padding Horizontal + Vertical" toReformat="false" toShortenFQNames="true">
    <variable name="VAL2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAL1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="paddingvh" value="const EdgeInsets.symmetric(vertical: $VAL1$, horizontal: $VAL2$)" description="Padding Vertical + Horizontal" toReformat="false" toShortenFQNames="true">
    <variable name="VAL1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAL2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="sgen" value="import 'package:suraking/generated/l10n.dart';" description="S gen" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="sample" value="import 'package:flutter/material.dart';&#10;&#10;void main() {&#10;  runApp(const MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({Key? key}) : super(key: key);&#10;&#10;  // This widget is the root of your application.&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      title: 'Flutter Demo',&#10;      theme: ThemeData(&#10;        // This is the theme of your application.&#10;        //&#10;        // Try running your application with &quot;flutter run&quot;. You'll see the&#10;        // application has a blue toolbar. Then, without quitting the app, try&#10;        // changing the primarySwatch below to Colors.green and then invoke&#10;        // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,&#10;        // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).&#10;        // Notice that the counter didn't reset back to zero; the application&#10;        // is not restarted.&#10;        primarySwatch: Colors.blue,&#10;      ),&#10;      home: const MyHomePage(title: 'Flutter Demo Home Page'),&#10;    );&#10;  }&#10;}&#10;&#10;class MyHomePage extends StatefulWidget {&#10;  const MyHomePage({Key? key, required this.title}) : super(key: key);&#10;&#10;  // This widget is the home page of your application. It is stateful, meaning&#10;  // that it has a State object (defined below) that contains fields that affect&#10;  // how it looks.&#10;&#10;  // This class is the configuration for the state. It holds the values (in this&#10;  // case the title) provided by the parent (in this case the App widget) and&#10;  // used by the build method of the State. Fields in a Widget subclass are&#10;  // always marked &quot;final&quot;.&#10;&#10;  final String title;&#10;&#10;  @override&#10;  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();&#10;}&#10;&#10;class _MyHomePageState extends State&lt;MyHomePage&gt; {&#10;  int _counter = 0;&#10;&#10;  void _incrementCounter() {&#10;    setState(() {&#10;      // This call to setState tells the Flutter framework that something has&#10;      // changed in this State, which causes it to rerun the build method below&#10;      // so that the display can reflect the updated values. If we changed&#10;      // _counter without calling setState(), then the build method would not be&#10;      // called again, and so nothing would appear to happen.&#10;      _counter++;&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // This method is rerun every time setState is called, for instance as done&#10;    // by the _incrementCounter method above.&#10;    //&#10;    // The Flutter framework has been optimized to make rerunning build methods&#10;    // fast, so that you can just rebuild anything that needs updating rather&#10;    // than having to individually change instances of widgets.&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        // Here we take the value from the MyHomePage object that was created by&#10;        // the App.build method, and use it to set our appbar title.&#10;        title: Text(widget.title),&#10;      ),&#10;      body: Center(&#10;        // Center is a layout widget. It takes a single child and positions it&#10;        // in the middle of the parent.&#10;        child: Column(&#10;          // Column is also a layout widget. It takes a list of children and&#10;          // arranges them vertically. By default, it sizes itself to fit its&#10;          // children horizontally, and tries to be as tall as its parent.&#10;          //&#10;          // Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the&#10;          // &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android&#10;          // Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)&#10;          // to see the wireframe for each widget.&#10;          //&#10;          // Column has various properties to control how it sizes itself and&#10;          // how it positions its children. Here we use mainAxisAlignment to&#10;          // center the children vertically; the main axis here is the vertical&#10;          // axis because Columns are vertical (the cross axis would be&#10;          // horizontal).&#10;          mainAxisAlignment: MainAxisAlignment.center,&#10;          children: &lt;Widget&gt;[&#10;            const Text(&#10;              'You have pushed the button this many times:',&#10;            ),&#10;            Text(&#10;              '$_counter',&#10;              style: Theme.of(context).textTheme.headline4,&#10;            ),&#10;          ],&#10;        ),&#10;      ),&#10;      floatingActionButton: FloatingActionButton(&#10;        onPressed: _incrementCounter,&#10;        tooltip: 'Increment',&#10;        child: const Icon(Icons.add),&#10;      ), // This trailing comma makes auto-formatting nicer for build methods.&#10;    );&#10;  }&#10;}&#10;" description="Sample" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>